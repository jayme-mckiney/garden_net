from app.models import Probe, DataPoint
from datetime import timedelta, datetime

def test_points_from_probe(client, test_probe_2):
  response = client.post('/data', json={
    'probe_ids': [test_probe_2.id] 
    })
  assert response.status_code == 200
  assert response.get_json() == {
    'test data3': [
      {'x': 1690935540000.0, 'y': 59.0},
      {'x': 1690935480000.0, 'y': 58.0},
      {'x': 1690935420000.0, 'y': 57.0},
      {'x': 1690935360000.0, 'y': 56.0},
      {'x': 1690935300000.0, 'y': 55.0},
      {'x': 1690935240000.0, 'y': 54.0},
      {'x': 1690935180000.0, 'y': 53.0},
      {'x': 1690935120000.0, 'y': 52.0},
      {'x': 1690935060000.0, 'y': 51.0},
      {'x': 1690935000000.0, 'y': 50.0},
      {'x': 1690934940000.0, 'y': 49.0},
      {'x': 1690934880000.0, 'y': 48.0},
      {'x': 1690934820000.0, 'y': 47.0},
      {'x': 1690934760000.0, 'y': 46.0},
      {'x': 1690934700000.0, 'y': 45.0},
      {'x': 1690934640000.0, 'y': 44.0},
      {'x': 1690934580000.0, 'y': 43.0},
      {'x': 1690934520000.0, 'y': 42.0},
      {'x': 1690934460000.0, 'y': 41.0},
      {'x': 1690934400000.0, 'y': 40.0}],
    'test data4': [
      {'x': 1690935540000.0, 'y': 79.0},
      {'x': 1690935480000.0, 'y': 78.0},
      {'x': 1690935420000.0, 'y': 77.0},
      {'x': 1690935360000.0, 'y': 76.0},
      {'x': 1690935300000.0, 'y': 75.0},
      {'x': 1690935240000.0, 'y': 74.0},
      {'x': 1690935180000.0, 'y': 73.0},
      {'x': 1690935120000.0, 'y': 72.0},
      {'x': 1690935060000.0, 'y': 71.0},
      {'x': 1690935000000.0, 'y': 70.0},
      {'x': 1690934940000.0, 'y': 69.0},
      {'x': 1690934880000.0, 'y': 68.0},
      {'x': 1690934820000.0, 'y': 67.0},
      {'x': 1690934760000.0, 'y': 66.0},
      {'x': 1690934700000.0, 'y': 65.0},
      {'x': 1690934640000.0, 'y': 64.0},
      {'x': 1690934580000.0, 'y': 63.0},
      {'x': 1690934520000.0, 'y': 62.0},
      {'x': 1690934460000.0, 'y': 61.0},
      {'x': 1690934400000.0, 'y': 60.0}]
  }

def test_points_from_probe_data(client, test_probe_2):
  probe = Probe.query.filter(Probe.id == test_probe_2.id).first()
  response = client.post('/data', json={
    'probedata_ids': [probe.probe_datas[1].id] 
    })
  assert response.status_code == 200
  assert response.get_json() == {
    'test data4': [
      {'x': 1690935540000.0, 'y': 79.0},
      {'x': 1690935480000.0, 'y': 78.0},
      {'x': 1690935420000.0, 'y': 77.0},
      {'x': 1690935360000.0, 'y': 76.0},
      {'x': 1690935300000.0, 'y': 75.0},
      {'x': 1690935240000.0, 'y': 74.0},
      {'x': 1690935180000.0, 'y': 73.0},
      {'x': 1690935120000.0, 'y': 72.0},
      {'x': 1690935060000.0, 'y': 71.0},
      {'x': 1690935000000.0, 'y': 70.0},
      {'x': 1690934940000.0, 'y': 69.0},
      {'x': 1690934880000.0, 'y': 68.0},
      {'x': 1690934820000.0, 'y': 67.0},
      {'x': 1690934760000.0, 'y': 66.0},
      {'x': 1690934700000.0, 'y': 65.0},
      {'x': 1690934640000.0, 'y': 64.0},
      {'x': 1690934580000.0, 'y': 63.0},
      {'x': 1690934520000.0, 'y': 62.0},
      {'x': 1690934460000.0, 'y': 61.0},
      {'x': 1690934400000.0, 'y': 60.0}]
  }

def test_points_from_graph(client, test_graph_1):
  response = client.post('/data', json={
    'graph_id': test_graph_1.id 
    })
  assert response.status_code == 200
  assert response.get_json() == {
    'test data1': [
      {'x': 1690935540000.0, 'y': 19.0},
      {'x': 1690935480000.0, 'y': 18.0},
      {'x': 1690935420000.0, 'y': 17.0},
      {'x': 1690935360000.0, 'y': 16.0},
      {'x': 1690935300000.0, 'y': 15.0},
      {'x': 1690935240000.0, 'y': 14.0},
      {'x': 1690935180000.0, 'y': 13.0},
      {'x': 1690935120000.0, 'y': 12.0},
      {'x': 1690935060000.0, 'y': 11.0},
      {'x': 1690935000000.0, 'y': 10.0},
      {'x': 1690934940000.0, 'y': 9.0},
      {'x': 1690934880000.0, 'y': 8.0},
      {'x': 1690934820000.0, 'y': 7.0},
      {'x': 1690934760000.0, 'y': 6.0},
      {'x': 1690934700000.0, 'y': 5.0},
      {'x': 1690934640000.0, 'y': 4.0},
      {'x': 1690934580000.0, 'y': 3.0},
      {'x': 1690934520000.0, 'y': 2.0},
      {'x': 1690934460000.0, 'y': 1.0},
      {'x': 1690934400000.0, 'y': 0.0}],
    'test data2': [
      {'x': 1690935540000.0, 'y': 39.0},
      {'x': 1690935480000.0, 'y': 38.0},
      {'x': 1690935420000.0, 'y': 37.0},
      {'x': 1690935360000.0, 'y': 36.0},
      {'x': 1690935300000.0, 'y': 35.0},
      {'x': 1690935240000.0, 'y': 34.0},
      {'x': 1690935180000.0, 'y': 33.0},
      {'x': 1690935120000.0, 'y': 32.0},
      {'x': 1690935060000.0, 'y': 31.0},
      {'x': 1690935000000.0, 'y': 30.0},
      {'x': 1690934940000.0, 'y': 29.0},
      {'x': 1690934880000.0, 'y': 28.0},
      {'x': 1690934820000.0, 'y': 27.0},
      {'x': 1690934760000.0, 'y': 26.0},
      {'x': 1690934700000.0, 'y': 25.0},
      {'x': 1690934640000.0, 'y': 24.0},
      {'x': 1690934580000.0, 'y': 23.0},
      {'x': 1690934520000.0, 'y': 22.0},
      {'x': 1690934460000.0, 'y': 21.0},
      {'x': 1690934400000.0, 'y': 20.0}]
  }

def test_points_with_start(client, test_probe_2, start_time):
  probe = Probe.query.filter(Probe.id == test_probe_2.id).first()
  timestamp = (start_time + timedelta(minutes=3)).timestamp() * 1000 #js timestamps are counted in ms
  response = client.post('/data', json={
    'probedata_ids': [probe.probe_datas[1].id],
    'start_time': timestamp
    })
  assert response.status_code == 200
  assert response.get_json() == {
    'test data4': [
      {'x': 1690935540000.0, 'y': 79.0},
      {'x': 1690935480000.0, 'y': 78.0},
      {'x': 1690935420000.0, 'y': 77.0},
      {'x': 1690935360000.0, 'y': 76.0},
      {'x': 1690935300000.0, 'y': 75.0},
      {'x': 1690935240000.0, 'y': 74.0},
      {'x': 1690935180000.0, 'y': 73.0},
      {'x': 1690935120000.0, 'y': 72.0},
      {'x': 1690935060000.0, 'y': 71.0},
      {'x': 1690935000000.0, 'y': 70.0},
      {'x': 1690934940000.0, 'y': 69.0},
      {'x': 1690934880000.0, 'y': 68.0},
      {'x': 1690934820000.0, 'y': 67.0},
      {'x': 1690934760000.0, 'y': 66.0},
      {'x': 1690934700000.0, 'y': 65.0},
      {'x': 1690934640000.0, 'y': 64.0},
      {'x': 1690934580000.0, 'y': 63.0}]
  }


def test_points_with_stop(client, test_probe_2, start_time):
  probe = Probe.query.filter(Probe.id == test_probe_2.id).first()
  timestamp = (start_time + timedelta(minutes=5)).timestamp() * 1000 #js timestamps are counted in ms
  response = client.post('/data', json={
    'probedata_ids': [probe.probe_datas[1].id],
    'end_time': timestamp
    })
  assert response.status_code == 200
  assert response.get_json() == {
    'test data4': [
      {'x': 1690934700000.0, 'y': 65.0},
      {'x': 1690934640000.0, 'y': 64.0},
      {'x': 1690934580000.0, 'y': 63.0},
      {'x': 1690934520000.0, 'y': 62.0},
      {'x': 1690934460000.0, 'y': 61.0},
      {'x': 1690934400000.0, 'y': 60.0}]
  }


def test_points_with_start_stop(client, test_probe_2, start_time):
  probe = Probe.query.filter(Probe.id == test_probe_2.id).first()
  timestamp_start = (start_time + timedelta(minutes=5)).timestamp() * 1000 #js timestamps are counted in ms
  timestamp_stop = (start_time + timedelta(minutes=15)).timestamp() * 1000 #js timestamps are counted in ms
  response = client.post('/data', json={
    'probedata_ids': [probe.probe_datas[1].id],
    'start_time': timestamp_start,
    'end_time': timestamp_stop
    })
  assert response.status_code == 200
  assert response.get_json() == {
    'test data4': [
      {'x': 1690935300000.0, 'y': 75.0},
      {'x': 1690935240000.0, 'y': 74.0},
      {'x': 1690935180000.0, 'y': 73.0},
      {'x': 1690935120000.0, 'y': 72.0},
      {'x': 1690935060000.0, 'y': 71.0},
      {'x': 1690935000000.0, 'y': 70.0},
      {'x': 1690934940000.0, 'y': 69.0},
      {'x': 1690934880000.0, 'y': 68.0},
      {'x': 1690934820000.0, 'y': 67.0},
      {'x': 1690934760000.0, 'y': 66.0},
      {'x': 1690934700000.0, 'y': 65.0}]
  }